apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def DEFAULT_COMPILE_SDK_VERSION             = 26
def DEFAULT_TARGET_SDK_VERSION              = 26
def DEFAULT_BUILD_TOOLS_VERSION             = '26.0.3'
def DEFAULT_GOOGLE_PLAY_SERVICES_VERSION    = '11.8.0'
def DEFAULT_FIREBASE_MESSAGING_VERSION      = '11.8.0'

android {
  compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
  buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)

  defaultConfig {
      minSdkVersion safeExtGet('minSdkVersion', 16)
      targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
      versionCode 1
      versionName "1.0"
      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
      manifestPlaceholders = [
        tipsiStripeRedirectScheme: "example"
      ]
  }

  lintOptions {
      abortOnError false
  }
  
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation 'com.facebook.react:react-native:+'
  implementation 'com.android.support:support-v4:26.1.0'
  implementation 'com.android.support:appcompat-v7:26.1.0'
  implementation "com.google.android.gms:play-services-wallet:${safeExtGet("googlePlayServicesVersion",DEFAULT_GOOGLE_PLAY_SERVICES_VERSION)}"
  implementation "com.google.firebase:firebase-core:${safeExtGet("firebaseVersion",DEFAULT_FIREBASE_MESSAGING_VERSION)}}"
  implementation 'com.stripe:stripe-android:8.1.0'
  implementation 'com.github.tipsi:CreditCardEntry:1.5.0'
}

repositories {
  maven {
    url 'https://maven.google.com/'
    name 'Google'
  }
}
